def buildAndPushImage(regionName, gitUrl, ecrUrl, rawImageName, rawImageTag, buildId) {
  def imageTag  = "${rawImageTag}.${buildId}";
  def imageName = "${ecrUrl}/${rawImageName}:${imageTag}";
  git(gitUrl);
  sh """
    aws ecr get-login-password --region ${regionName} | \
    docker login --username AWS --password-stdin ${ecrUrl}
    docker build -t ${imageName} .
    docker push ${imageName}
  """;
}

def applyTerraformUpdates(accountId, regionName, projectName, environmentName) {
  def bucketName = "${accountId}-${projectName}-${environmentName}-terraform-state";
  def tableName  = "${accountId}-${projectName}-${environmentName}-terraform-lock";
  git("https://github.com/alfpedraza-aws-devops/infrastructure");
  withCredentials([
    string(credentialsId: "AWS_ACCESS_KEY_ID"    , variable: "AWS_ACCESS_KEY_ID"    ),
    string(credentialsId: "AWS_SECRET_ACCESS_KEY", variable: "AWS_SECRET_ACCESS_KEY")
  ]) {
    sh """
      cd ./${environmentName}
      terraform init \
        -input=false \
        -backend-config="bucket=${bucketName}" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="region=${regionName}" \
        -backend-config="dynamodb_table=${tableName}" \
        -backend-config="encrypt=true"
      terraform apply \
        -input=false \
        -lock=true \
        -auto-approve \
        -var "account_id=${accountId}" \
        -var "region_name=${regionName}" \
        -var "project_name=${projectName}"
    """;
  }
}

def waitUntil(scriptText, errorMessage) {
  def isReady = false;
  for (def i = 0; i < 40; i++) {
    def textReady = sh(script: scriptText, returnStdout: true).trim();
    isReady = (!textReady.isEmpty());
    if (isReady) break;
    sleep(15);
  }
  if (!isReady) throw new Exception("Timeout!");
}

def waitUntilOneNodeIsReady() {
  waitUntil('''
    NODES="$(kubectl --kubeconfig=./helm/admin.conf get nodes)"
    NODE_LINE=$(echo "$NODES" | grep "[[:space:]]\\+Ready[[:space:]]\\+node[[:space:]]\\+" | head -1)
    echo $NODE_LINE
  ''');
}

def waitUntilTillerIsRunning() {
  waitUntil('''
    TILLER="$(kubectl --kubeconfig=./helm/admin.conf get deployment tiller-deploy --namespace=kube-system)"
    TILLER_LINE=$(echo "$TILLER" | grep "^tiller-deploy[[:space:]]\\+[:digit:]\\+[[:space:]]\\+" | head -1)
    echo $TILLER_LINE
  ''');
}

def waitUntilTillerIsReady() {
  sh "kubectl --kubeconfig=./helm/admin.conf rollout status -w deployment/tiller-deploy --namespace=kube-system"
}

def deployApp(accountId, regionName, projectName, environmentName) {
  def bucketName = "${accountId}-${projectName}-private-${environmentName}-master"
  git("https://github.com/alfpedraza-aws-devops/deployment")
  sh """
    cd ./helm
    aws s3 cp s3://${bucketName}/admin.conf ./admin.conf --region ${regionName}
  """;
  waitUntilOneNodeIsReady();
  waitUntilTillerIsRunning();
  waitUntilTillerIsReady();
  sh """
    cd ./helm
    export KUBECONFIG=./admin.conf
    helm upgrade \
      --install \
      --wait --timeout 300 \
      ${projectName} ./aws-devops
  """;
}

node {

  stage("Build Fibonacci") {
    buildAndPushImage(
      /* regionName   */ params.REGION_NAME,
      /* gitUrl       */ "https://github.com/alfpedraza-aws-devops/fibonacci",
      /* ecrUrl       */ params.ECR_URL,
      /* rawImageName */ "aws-devops-fibonacci",
      /* rawImageTag  */ "0.1.4",
      /* buildId      */ env.BUILD_ID)
  }

  stage("Build Kubernetes API") {
    buildAndPushImage(
      /* regionName   */ params.REGION_NAME,
      /* gitUrl       */ "https://github.com/alfpedraza-aws-devops/kubernetes-api",
      /* ecrUrl       */ params.ECR_URL,
      /* rawImageName */ "aws-devops-kubernetes-api",
      /* rawImageTag  */ "0.1.11",
      /* buildId      */ env.BUILD_ID)
  }

  stage("Build Web UI") {
    buildAndPushImage(
      /* regionName   */ params.REGION_NAME,
      /* gitUrl       */ "https://github.com/alfpedraza-aws-devops/web-ui",
      /* ecrUrl       */ params.ECR_URL,
      /* rawImageName */ "aws-devops-web-ui",
      /* rawImageTag  */ "0.1.4",
      /* buildId      */ env.BUILD_ID)
  }

  stage("Update VPC") {
    applyTerraformUpdates(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "vpc")
  }

  stage("Update DEV environment") {
    applyTerraformUpdates(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "dev")
  }

  stage("Deploy to DEV environment") {
    deployApp(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "dev")
  }

  stage("Update PROD environment") {
    input "Deploy to PROD?"
    applyTerraformUpdates(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "prod")
  }

  stage("Deploy to PROD environment") {
    deployApp(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "prod")
  }
  
}