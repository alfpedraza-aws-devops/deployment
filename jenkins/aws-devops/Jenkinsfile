def getImageName(String ecrUrl, String name, String tag, String buildId) {
  String imageName = "${ecrUrl}/${name}:${tag}.${buildId}";
  return imageName;
}

def buildAndPushImage(
  String regionName, String gitUrl, String ecrUrl,
  String rawImageName, String rawImageTag, String buildId) {

  git(gitUrl);
  String imageName = getImageName(ecrUrl, rawImageName, rawImageTag, buildId);
  sh """
    aws ecr get-login-password --region ${regionName} | \
    docker login --username AWS --password-stdin ${ecrUrl}
    docker build -t ${imageName} .
    docker push ${imageName}
  """;
}

def applyTerraformUpdates(
  String accountId, String regionName,
  String projectName, String environmentName) {

  git("https://github.com/alfpedraza-aws-devops/infrastructure");
  withCredentials([
    string(credentialsId: "AWS_ACCESS_KEY_ID"    , variable: "AWS_ACCESS_KEY_ID"    ),
    string(credentialsId: "AWS_SECRET_ACCESS_KEY", variable: "AWS_SECRET_ACCESS_KEY")
  ]) {
    String bucketName = "${accountId}-${projectName}-${environmentName}-terraform-state";
    String tableName  = "${accountId}-${projectName}-${environmentName}-terraform-lock";
    sh """
      cd ./${environmentName}
      terraform init \
        -input=false \
        -backend-config="bucket=${bucketName}" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="region=${regionName}" \
        -backend-config="dynamodb_table=${tableName}" \
        -backend-config="encrypt=true"
      terraform apply \
        -input=false \
        -lock=true \
        -auto-approve \
        -var "account_id=${accountId}" \
        -var "region_name=${regionName}" \
        -var "project_name=${projectName}"
    """;
  }
}

def waitUntil(String scriptText) {
  Boolean isReady = false;
  for (int i = 0; i < 40; i++) {
    String result = sh(script: scriptText, returnStdout: true).trim();
    isReady = (!result.isEmpty());
    if (isReady) break;
    sleep(15);
  }
  if (!isReady) throw new Exception("Timeout!");
}

def waitUntilKubeConfigIsReady(String bucketName, String regionName) {
  waitUntil("""
    aws s3 cp s3://${bucketName}/admin.conf ./helm/admin.conf --region ${regionName} || true
    RESULT=\$(stat ./helm/admin.conf || echo "")
    echo \$RESULT
  """);
}

def waitUntilHelmTillerIsReady() {
  waitUntil('''
    RESULT=""
    TILLER=$(kubectl rollout status -w deployment/tiller-deploy \
      --namespace=kube-system --kubeconfig=./helm/admin.conf \
      || echo "(NotFound)")
    TILLER_NOT_FOUND=$(echo "$TILLER" | grep "(NotFound)" | head -1)
    if [[ $TILLER_NOT_FOUND == "" ]]; then RESULT="Found"; else RESULT=""; fi;
    echo $RESULT
  ''');
}

def getLoadBalancerDNS(String serviceName) {
  String scriptText = """
    kubectl get service ${serviceName} \
      -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' \
      --kubeconfig=./helm/admin.conf
  """
  waitUntil(scriptText);
  String dns = sh(script: scriptText, returnStdout: true).trim();
  return dns;
}

def deployLoadBalancers(String projectName) {
  sh """
    cd helm
    mv aws-devops/templates tmp
    mkdir aws-devops/templates
    cp tmp/kubernetes-api-service.yaml aws-devops/templates/kubernetes-api-service.yaml
    cp tmp/web-ui-service.yaml         aws-devops/templates/web-ui-service.yaml
    export KUBECONFIG=admin.conf
    helm upgrade \
      --install \
      --wait \
      --timeout 300 \
      ${projectName} \
      ./aws-devops
  """;
}

def deployApplication(
  String projectName,
  String fibonacciImageName, String kubernetesApiImageName, String webUiImageName,
  String webUiDns, String kubernetesApiDns) {
  
  sh """
    cd helm
    rm -rf aws-devops/templates 
    mv tmp aws-devops/templates
    export KUBECONFIG=admin.conf
    helm upgrade \
      --install \
      --wait \
      --timeout 300 \
      --set fibonacci.deployment.image.name=${fibonacciImageName} \
      --set kubernetesapi.deployment.image.name=${kubernetesApiImageName} \
      --set webui.deployment.image.name=${webUiImageName} \
      --set kubernetesapi.deployment.env.corsOrigins=${webUiDns} \
      --set webui.deployment.env.kubernetesApiUrl=${kubernetesApiDns} \
      ${projectName} \
      ./aws-devops
  """;
}

def deployApp(
  String accountId, String regionName, String projectName, String environmentName,
  String ecrUrl, String buildId,
  String fibonacciImageTag, String kubernetesApiImageTag, String webUiImageTag) {

  git("https://github.com/alfpedraza-aws-devops/deployment");
  
  String bucketName = "${accountId}-${projectName}-private-${environmentName}-master";
  waitUntilKubeConfigIsReady(bucketName, regionName);
  waitUntilHelmTillerIsReady();
  deployLoadBalancers(projectName);

  String kubernetesApiDns        = "http://" + getLoadBalancerDNS("kubernetes-api");
  String webUiDns                = "http://" + getLoadBalancerDNS("web-ui");
  String fibonacciImageName      = getImageName(ecrUrl, "aws-devops-fibonacci"     , fibonacciImageTag    , buildId);
  String kubernetesApiImageName  = getImageName(ecrUrl, "aws-devops-kubernetes-api", kubernetesApiImageTag, buildId);
  String webUiImageName          = getImageName(ecrUrl, "aws-devops-web-ui"        , webUiImageTag        , buildId);

  deployApplication(
    projectName,
    fibonacciImageName,
    kubernetesApiImageName,
    webUiImageName,
    webUiDns,
    kubernetesApiDns);
}

node {

  stage("Build Fibonacci") {
    buildAndPushImage(
      /* regionName   */ params.REGION_NAME,
      /* gitUrl       */ "https://github.com/alfpedraza-aws-devops/fibonacci",
      /* ecrUrl       */ params.ECR_URL,
      /* rawImageName */ "aws-devops-fibonacci",
      /* rawImageTag  */ params.FIBONACCI_IMAGE_TAG,
      /* buildId      */ env.BUILD_ID);
  }

  stage("Build Kubernetes API") {
    buildAndPushImage(
      /* regionName   */ params.REGION_NAME,
      /* gitUrl       */ "https://github.com/alfpedraza-aws-devops/kubernetes-api",
      /* ecrUrl       */ params.ECR_URL,
      /* rawImageName */ "aws-devops-kubernetes-api",
      /* rawImageTag  */ params.KUBERNETESAPI_IMAGE_TAG,
      /* buildId      */ env.BUILD_ID);
  }

  stage("Build Web UI") {
    buildAndPushImage(
      /* regionName   */ params.REGION_NAME,
      /* gitUrl       */ "https://github.com/alfpedraza-aws-devops/web-ui",
      /* ecrUrl       */ params.ECR_URL,
      /* rawImageName */ "aws-devops-web-ui",
      /* rawImageTag  */ params.WEBUI_IMAGE_TAG,
      /* buildId      */ env.BUILD_ID);
  }

  stage("Update VPC") {
    applyTerraformUpdates(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "vpc");
  }

  stage("Update DEV environment") {
    applyTerraformUpdates(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "dev");
  }

  stage("Deploy to DEV environment") {
    deployApp(
      /* accountId             */ params.ACCOUNT_ID,
      /* regionName            */ params.REGION_NAME,
      /* projectName           */ params.PROJECT_NAME,
      /* environmentName       */ "dev",
      /* ecrUrl                */ params.ECR_URL,
      /* buildId               */ env.BUILD_ID,
      /* fibonacciImageTag     */ params.FIBONACCI_IMAGE_TAG,
      /* kubernetesApiImageTag */ params.KUBERNETESAPI_IMAGE_TAG,
      /* webUiImageTag         */ params.WEBUI_IMAGE_TAG);
  }

  stage("Update PROD environment") {
    input("Deploy to PROD?");
    applyTerraformUpdates(
      /* accountId       */ params.ACCOUNT_ID,
      /* regionName      */ params.REGION_NAME,
      /* projectName     */ params.PROJECT_NAME,
      /* environmentName */ "prod");
  }

  stage("Deploy to PROD environment") {
    deployApp(
      /* accountId             */ params.ACCOUNT_ID,
      /* regionName            */ params.REGION_NAME,
      /* projectName           */ params.PROJECT_NAME,
      /* environmentName       */ "prod",
      /* ecrUrl                */ params.ECR_URL,
      /* buildId               */ env.BUILD_ID,
      /* fibonacciImageTag     */ params.FIBONACCI_IMAGE_TAG,
      /* kubernetesApiImageTag */ params.KUBERNETESAPI_IMAGE_TAG,
      /* webUiImageTag         */ params.WEBUI_IMAGE_TAG);
  }
  
}